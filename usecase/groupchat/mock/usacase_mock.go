// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/groupchat/init.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/lolmourne/go-groupchat/model"
)

// MockUsecaseItf is a mock of UsecaseItf interface.
type MockUsecaseItf struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseItfMockRecorder
}

// MockUsecaseItfMockRecorder is the mock recorder for MockUsecaseItf.
type MockUsecaseItfMockRecorder struct {
	mock *MockUsecaseItf
}

// NewMockUsecaseItf creates a new mock instance.
func NewMockUsecaseItf(ctrl *gomock.Controller) *MockUsecaseItf {
	mock := &MockUsecaseItf{ctrl: ctrl}
	mock.recorder = &MockUsecaseItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecaseItf) EXPECT() *MockUsecaseItfMockRecorder {
	return m.recorder
}

// CreateGroupchat mocks base method.
func (m *MockUsecaseItf) CreateGroupchat(name string, adminID int64, desc string, categoryID int64) (model.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroupchat", name, adminID, desc, categoryID)
	ret0, _ := ret[0].(model.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroupchat indicates an expected call of CreateGroupchat.
func (mr *MockUsecaseItfMockRecorder) CreateGroupchat(name, adminID, desc, categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupchat", reflect.TypeOf((*MockUsecaseItf)(nil).CreateGroupchat), name, adminID, desc, categoryID)
}

// EditGroupchat mocks base method.
func (m *MockUsecaseItf) EditGroupchat(name, desc, categoryID string) (model.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditGroupchat", name, desc, categoryID)
	ret0, _ := ret[0].(model.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditGroupchat indicates an expected call of EditGroupchat.
func (mr *MockUsecaseItfMockRecorder) EditGroupchat(name, desc, categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditGroupchat", reflect.TypeOf((*MockUsecaseItf)(nil).EditGroupchat), name, desc, categoryID)
}

// GetRoomByID mocks base method.
func (m *MockUsecaseItf) GetRoomByID(roomID int64) (model.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomByID", roomID)
	ret0, _ := ret[0].(model.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomByID indicates an expected call of GetRoomByID.
func (mr *MockUsecaseItfMockRecorder) GetRoomByID(roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomByID", reflect.TypeOf((*MockUsecaseItf)(nil).GetRoomByID), roomID)
}

// GetRoomList mocks base method.
func (m *MockUsecaseItf) GetRoomList(userID int64) ([]model.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomList", userID)
	ret0, _ := ret[0].([]model.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomList indicates an expected call of GetRoomList.
func (mr *MockUsecaseItfMockRecorder) GetRoomList(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomList", reflect.TypeOf((*MockUsecaseItf)(nil).GetRoomList), userID)
}

// JoinRoom mocks base method.
func (m *MockUsecaseItf) JoinRoom(roomID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinRoom", roomID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinRoom indicates an expected call of JoinRoom.
func (mr *MockUsecaseItfMockRecorder) JoinRoom(roomID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinRoom", reflect.TypeOf((*MockUsecaseItf)(nil).JoinRoom), roomID, userID)
}
